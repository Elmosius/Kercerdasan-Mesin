# -*- coding: utf-8 -*-
"""T12_2272008.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ielGpY-06reFRAFPuiIl94QpPaugdWSJ

># **Pertemuan 12 - Ensemble Model (Random Forest)**
"""

import pandas as pd
import numpy as np

"""<small> 1. Gunakanlah dataset “ChurnDataset.csv”. </small>"""

data = pd.read_csv('ChurnDataset.csv')

"""<small> 2.  Lakukanlah data preparations. 
Perhatikan kolom-kolom 
yang bertipe data kategorikal, anda
dapat menggunakan one-hot encoding/ordinal 
encoding/label encoder. </small>
"""

from sklearn.preprocessing import OneHotEncoder, LabelEncoder

print(data.head())
data = data.drop(columns=\
['RowNumber', 'CustomerId', 'Surname'])

data = pd.get_dummies(data, \
columns=['Geography'], drop_first=True)

label_encoder = LabelEncoder()
data['Gender'] = label_encoder.fit_transform(data['Gender'])

X = data.drop(columns=['Exited'])
y = data['Exited']

"""<small> 3. Pisahkan dataset yang ada menjadi data train dan 
data test dengan rasio 70% dan 30% </small>"""

from sklearn.model_selection import train_test_split, GridSearchCV

X_train, X_test, y_train, y_test = \
train_test_split(X, y, test_size=0.3, random_state=42)

"""<small> 4.Lakukan pembentukan base model dengan 
menggunakan SVM, Decision Tree dan RandomForest. </small>
"""

from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

# Membangun model SVM
svm_model = SVC(random_state=42)
svm_model.fit(X_train, y_train)

# Membangun model Decision Tree
decision_tree_model = DecisionTreeClassifier\
(random_state=42)
decision_tree_model.fit(X_train, y_train)

# Membangun model Random Forest
random_forest_model = RandomForestClassifier\
(random_state=42)
random_forest_model.fit(X_train, y_train)

"""<small> 5.Lakukanlah pembentukan Grid Search untuk mencari 
parameter terbaik dengan cross-validation 
(minimal 2 parameter). </small>"""

# Parameter grid untuk SVM
svm_param_grid = {
    'C': [0.1, 1, 10],
    'kernel': ['linear', 'rbf']
}

svm_grid_search = GridSearchCV\
(svm_model, svm_param_grid, \
cv=5, n_jobs=-1, verbose=1)

svm_grid_search.fit(X_train, y_train)
print("Best parameters for SVM:", svm_grid_search.best_params_)

# Parameter grid untuk Decision Tree
decision_tree_param_grid = {
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 10, 20]
}

decision_tree_grid_search = GridSearchCV\
(decision_tree_model, decision_tree_param_grid,\
cv=5, n_jobs=-1, verbose=1)

decision_tree_grid_search.fit(X_train, y_train)

print("Best parameters for Decision Tree:",\
decision_tree_grid_search.best_params_)

# Parameter grid untuk Random Forest
random_forest_param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 10, 20],
}

random_forest_grid_search = GridSearchCV(random_forest_model\
, random_forest_param_grid, cv=5, n_jobs=-1, verbose=1)

random_forest_grid_search.fit(X_train, y_train)
print("Best parameters for Random Forest:",\
random_forest_grid_search.best_params_)

"""<small>6.Lakukan pembentukan model menggunakan SVM, 
Decision Tree dan Random Forest dengan
best parameter yang diambil dari hasil grid search dan tampilkan 
hasil akurasi yang didapat.</small>
"""

from sklearn.metrics import accuracy_score, \
f1_score, confusion_matrix, \
precision_score, recall_score

# Membentuk model SVM dengan best parameters
best_svm_params = svm_grid_search.best_params_
best_svm_model = SVC(**best_svm_params, \
random_state=42)

best_svm_model.fit(X_train, y_train)
best_svm_predictions = best_svm_model.predict(X_test)
best_svm_accuracy = accuracy_score(y_test, best_svm_predictions)
print("SVM Best Accuracy:", best_svm_accuracy)

# Membentuk model Decision Tree dengan best parameters
best_decision_tree_params = decision_tree_grid_search.best_params_
best_decision_tree_model = \
DecisionTreeClassifier(**best_decision_tree_params, random_state=42)

best_decision_tree_model.fit(X_train, y_train)
best_decision_tree_predictions = \
best_decision_tree_model.predict(X_test)

best_decision_tree_accuracy = \
accuracy_score(y_test, best_decision_tree_predictions)

print("Decision Tree Best Accuracy:", best_decision_tree_accuracy)

# Membentuk model Random Forest dengan best parameters
best_random_forest_params = random_forest_grid_search.best_params_
best_random_forest_model = \
RandomForestClassifier(**best_random_forest_params, random_state=42)

best_random_forest_model.fit(X_train, y_train)
best_random_forest_predictions = \
best_random_forest_model.predict(X_test)

best_random_forest_accuracy = \
accuracy_score(y_test, best_random_forest_predictions)
print("Random Forest Best Accuracy:", best_random_forest_accuracy)

"""<small>7.Tampilkan accuracy, confusion matrix(F1 Score), 
precision serta recall dari kedua model anda.</small>"""

# Accuracy, confusion matrix, precision, recall SVM
svm_pred = svm_model.predict(X_test)
print(f"SVM Accuracy: \
{accuracy_score(y_test, svm_pred)}")

print(f"SVM Confusion Matrix\
:{confusion_matrix(y_test, svm_pred)}")

print(f"SVM Precision: \
{precision_score(y_test, svm_pred)}")

print(f"SVM Recall:\
{recall_score(y_test, svm_pred)}")

# Untuk model dengan parameter terbaik SVM
print(f'SVM Best Accuracy:\
{best_svm_accuracy}')

print(f'Best Confusion Matrix:\
{confusion_matrix(y_test, best_svm_predictions)}')

print(f'Best SVM F1 Score: \
{f1_score(y_test,best_svm_predictions)}')

print(f'Best SVM Precision: \
{precision_score(y_test,best_svm_predictions)}')

print(f'Best SVM Recall: \
{y_test,best_svm_predictions}')

# Accuracy, confusion matrix, precision, recall Decision Tree
decision_tree_pred = decision_tree_model.predict(X_test)
print(f"Decision Tree Accuracy: \
{accuracy_score(y_test, decision_tree_pred)}")

print(f"Decision Tree Confusion Matrix:\
{confusion_matrix(y_test, decision_tree_pred)}")

print(f"Decision Tree Precision: \
{precision_score(y_test, decision_tree_pred)}")

print(f"Decision Tree Recall: \
{recall_score(y_test, decision_tree_pred)}\n")


# Untuk model dengan parameter terbaik Decision Tree
print(f"Decision Tree Best Accuracy: \
{best_decision_tree_accuracy}")

print(f'Best Confusion Matrix: \
{confusion_matrix(y_test, best_decision_tree_predictions)}')

print(f'Best Decision Tree F1 Score: \
{f1_score(y_test, best_decision_tree_predictions)}')

print(f'Best Decision Tree Precision: \
{precision_score(y_test, best_decision_tree_predictions)}')

print(f'Best Decision Tree Recall: \
{recall_score(y_test, best_decision_tree_predictions)}')

# Accuracy, confusion matrix, precision, recall Random Forest
random_forest_pred = random_forest_model.predict(X_test)
print(f"Random Forest Accuracy: \
{accuracy_score(y_test, random_forest_pred)}")

print(f"Random Forest Confusion Matrix:\
{confusion_matrix(y_test, random_forest_pred)}")

print(f"Random Forest Precision:\
{precision_score(y_test, random_forest_pred)}")

print(f"Random Forest Recall:\
{recall_score(y_test, random_forest_pred)}\n")

# Untuk model dengan parameter terbaik Random Forest
print(f"Random Forest  Best Accuracy: \
{best_random_forest_accuracy}")

print(f'Best Confusion Matrix: \
{confusion_matrix(y_test, best_random_forest_predictions)}')

print(f'Best Random Forest F1 Score: \
{f1_score(y_test, best_random_forest_predictions)}')

print(f'Best Random Forest Precision: \
{precision_score(y_test, best_random_forest_predictions)}')

print(f'Best Random Forest Recall: \
{recall_score(y_test, best_random_forest_predictions)}')

"""<small>8.Berikan analisis apakah hasilnya menjadi 
lebih baik</small>

Untuk SVM :
(belum selesai running karena lama sekali)

Untuk Decision Tree:

Setelah penyetelan hyperparameter, akurasi, presisi, dan recall 
meningkat. Akurasi meningkat dari 0.808 menjadi 0.839, presisi 
meningkat dari 0.506 menjadi 0.615, namun recall mengalami 
penurunan dari 0.533 menjadi 0.462.

Untuk Random Forest:
Setelah penyetelan hyperparameter, akurasi dan presisi Random 
Forest tetap relatif stabil, namun recall mengalami sedikit 
penurunan dari 0.467 menjadi 0.462.

Secara keseluruhan, meskipun terjadi perbaikan pada beberapa
metrik kinerja model Decision Tree setelah penyetelan hyperparameter, 
peningkatan ini tidak signifikan karena recall mengalami penurunan. 
Sementara itu, performa model Random Forest cenderung stabil setelah 
penyetelan hyperparameter, dengan sedikit perubahan pada recall. 
Hal ini menunjukkan bahwa penyetelan hyperparameter tidak selalu
menghasilkan peningkatan kinerja yang signifikan pada setiap model.
"""